buildscript {

}
plugins {
    id 'java'
    id 'maven'
}

group 'com.langkye'
version '0.0.1'
sourceCompatibility = 1.8
targetCompatibility = 1.8

//仓库配置
repositories {
    //首先去本地仓库找
    mavenLocal()
    //然后去阿里仓库找
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    //最后从maven中央仓库找
    mavenCentral()
}

//依赖配置
dependencies {
    //微信支付工具
    implementation 'com.github.wechatpay-apiv3:wechatpay-apache-httpclient:0.2.1'

    //okhttp3
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.9.1'
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.4.10'
    implementation group: 'com.squareup.okio', name: 'okio', version: '2.8.0'

    //Hutool工具类: Hutool是一个小而全的Java工具类库，通过静态方法封装，降低相关API的学习成本，提高工作效率，使Java拥有函数式语言般的优雅，让Java语言也可以“甜甜的”。
    implementation group: 'cn.hutool', name: 'hutool-all', version: '5.5.9'

    //jetty: 解析url为map
    implementation group: 'org.mortbay.jetty', name: 'jetty-util', version: '6.1.26'

    //jcraft: sftp工具类
    implementation group: 'com.jcraft', name: 'jsch', version: '0.1.55'

    //lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.18'
    annotationProcessor 'org.projectlombok:lombok:1.18.18'


    //Json工具类: fastjson
    implementation group: 'com.alibaba', name: 'fastjson', version: '1.2.75'

    /* mark：[1]
     * if your project build [not] on springboot
     * 如果你的项目不是构建在springboot上，你必须引入如下hibernate-validator校验依赖：基于非springboot的项目构建，使用校验你需要引入（import javax.validation.*;）
     * notes：mark:[1] and mark:[2] The verification dependencies introduced by the two builds are different. If you change the build method, please rebuild your project, delete the wrong import, and import the correct dependency package
     * 注意：mark：[1] 和 mark：[2] 两种构建所引入的校验依赖不一样，如果你更改构建方式，请重新rebuild你的项目，将错误的import删除，并import正确的依赖包
     **/
    //spring-core
    implementation group: 'org.springframework', name: 'spring-core', version: '5.3.7'
    // https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator
    implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: '7.0.1.Final'
    implementation group: 'jakarta.el', name: 'jakarta.el-api', version: '4.0.0'
    implementation group: 'org.glassfish', name: 'jakarta.el', version: '4.0.1'

    /* mark：[2]
     * if your project build on springboot
     * 如果你的项目构建在springboot上，你只需要引入如下依赖：基于springboot的项目构建，使用校验你需要引入（import javax.validation.*;）
     * notes：mark:[1] and mark:[2] The verification dependencies introduced by the two builds are different. If you change the build method, please rebuild your project, delete the wrong import, and import the correct dependency package
     * 注意：mark：[1] 和 mark：[2] 两种构建所引入的校验依赖不一样，如果你更改构建方式，请重新rebuild你的项目，将错误的import删除，并import正确的依赖包
     **/
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter
    //implementation group: 'org.springframework.boot', name: 'spring-boot-starter', version: '2.5.0'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation
    //implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.5.0'



    //commons-lang3工具类：StringUtils
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

    //slf4j
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'

    //测试
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

//测试配置
test {
    useJUnitPlatform()
}


//gradle 转换为 maven pom, 运行writeNewPom任务, 将在build目录下生成对应的pom.xml文件
// 命令: gradle writeNewPom
task writeNewPom {
    pom {
        project {
            inceptionYear '2021'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'wechatpay'
                }
            }
        }
    }.writeTo("$buildDir/pom.xml")
}
